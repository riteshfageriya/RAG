# -*- coding: utf-8 -*-
"""frontend.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1R7gfVFDS_almBSHxo5PqegveZpzHTbqu
"""

# frontend.py
import streamlit as st
from rag_mindflix import VideoQASystem  # Changed file name
from pytube import YouTube
import tempfile
import time

# Initialize system
@st.cache_resource
def load_system():
    return VideoQASystem()

qa_system = load_system()

# Streamlit UI
st.title("ðŸŽ¥ YouTube Video Q&A System")
st.markdown("Analyze any YouTube video content through Q&A")

# URL Input
video_url = st.text_input("Enter YouTube URL:")
process_button = st.button("Process Video")

if process_button and video_url:
    with st.spinner("Downloading and processing video..."):
        try:
            # Download audio from YouTube
            yt = YouTube(video_url)
            audio_stream = yt.streams.filter(only_audio=True).first()

            with tempfile.TemporaryDirectory() as tmpdir:
                audio_path = audio_stream.download(output_path=tmpdir)

                # Transcribe audio
                transcription = qa_system.process_video(audio_path)

                if transcription:
                    st.session_state.processed = True
                    st.success(f"Video processed: {yt.title}")
                    st.video(video_url)
                else:
                    st.error("Failed to process video")

        except Exception as e:
            st.error(f"Error processing video: {str(e)}")

# Q&A Interface
if st.session_state.get('processed'):
    question = st.text_input("Ask about the video content:")

    if st.button("Get Answer") and question:
        with st.spinner("Analyzing content..."):
            try:
                start_time = time.time()
                answer = qa_system.ask(question)
                response_time = time.time() - start_time

                st.subheader("Answer:")
                st.markdown(answer)
                st.caption(f"Response time: {response_time:.2f} seconds")

            except Exception as e:
                st.error(f"Error generating answer: {str(e)}")

